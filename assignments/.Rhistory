X <- ()
X <- c()
X[i] <- unlist(split[i])
X <- c()
split <- strsplit(Omega,"") #list of lists
for(i in 1:length(split)){ #for split[1:8]
X <- c(unlist(split[i]))
}
X
split <- strsplit(Omega,"") #list of lists
X <- numeric(split)
X <- numeric(length(split))
for(i in 1:length(split)){ #for split[1:8]
X <- unlist(split[i])
}
X[i] <- unlist(split[i])
X
split <- strsplit(Omega,"")
View(split)
split <- strsplit(Omega,"")
for(i in split[[i]]){
for(j in 1:length(split[[i]])){
if(j=="H"){
split[[i]][j] <- 1
} else{
split[[i]][j] <- 0
}
}
}
split
length(split[1])
length(split[[1]])
split
split[[2]]
split[[2]][3]
for(i in length(split)){ #1:8
for(j in 1:length(split[[i]])){
for(k in split[[i]][j]){
if(k=="H"){
split[[i]][j] <- 1
} else{
split[[i]][j] <- 0
}
}
}
}
#data.frame for X heads and respective probabilities
h <- data.frame(prop.table(table(X)))
split <- strsplit(Omega,"")
for(i in length(split)){ #1:8
for(j in 1:length(split[[i]])){
for(k in split[[i]][j]){
if(k=="H"){
split[[i]][j] <- 1
} else{
split[[i]][j] <- 0
}
}
}
}
split
split <- strsplit(Omega,"")
for(i in length(split)){ #1:8
for(j in 1:length(split[[i]])){
for(j in split[[i]][j]){
if(j=="H"){
split[[i]][j] <- 1
} else{
split[[i]][j] <- 0
}
}
}
}
split
split <- strsplit(Omega,"")
for(i in length(split)){ #1:8
for(j in 1:length(split[[i]])){
if(j=="H"){
split[[i]][j] <- 1
} else{
split[[i]][j] <- 0
}
}
}
split
length(split[[2]])
split <- strsplit(Omega,"")
for(i in length(split)){ #1:8
for(j in split[[i]]){
if(j=="H"){
split[[i]][j] <- 1
} else{
split[[i]][j] <- 0
}
}
}
split
split[[2]][2]
split[[2]]
split <- strsplit(Omega,"")
for(i in length(split)){ #1:8
for(j in split[[i]]){
if(j=="H"){
split[[i]][j] <- 0
} else{
split[[i]][j] <- 0
}
}
}
split
split <- newcolumn(0)
split$X
split$X <- 0
View(split)
X <- c(0)
X
X[1]
split[[i]]
split[[1]]
X <- c(0)
split <- strsplit(Omega,"")
for(i in length(split)){ #1:8
for(j in split[[i]]){
if(j=="H"){
X[j] <- X[j]+1
}
}
}
X
X <- c(0)
split <- strsplit(Omega,"")
for(i in length(split)){ #1:8
for(j in split[[i]]){
if(j=="H"){
X[j] <- 1
}
}
}
X
#get number of heads for each element in Omega
X.val <- numeric(length(Omega))
split <- strsplit(Omega,"")
for(i in 1:length(split)){
for(j in split[[i]]){
if(j=="H"){
X.val[i] <- X.val[i]+1
}
}
}
X.val
split
?numeric
#get number of heads for each element in Omega
X.val <- numeric(length(Omega))
split <- strsplit(Omega,"")
for(i in split[[1:length(split)]]){
if(i=="H"){
X.val[i] <- X.val[i]+1
}
}
X.val[i] <- X.val[i]+1
if(j=="H"){
X.val[i] <- X.val[i]+1
}
#get number of heads for each element in Omega
X.val <- numeric(length(Omega))
split <- strsplit(Omega,"")
for(i in 1:length(split)){
for(j in split[[i]]){
if(j=="H"){
X.val[i] <- X.val[i]+1
}
}
}
X.val
#get number of heads for each element in Omega
X.val <- numeric(length(Omega))
split <- strsplit(Omega,"")
for(i in 1:length(split)){
for(j in split[[i]]){
if(j=="H"){
X.val[i] <- X.val[i]+1
}
}
}
X.val
table(X.value)
table(X.val)
#data.frame for X heads and respective probabilities
h <- data.frame(prop.table(table(X)))
names(h)[2] <- "probs"
print(h)
split2 <- unlist(strsplit(Omega,""))
split2
?for
#get number of heads for each element in Omega
probs <- numeric(length(Omega))
split <- strsplit(Omega,"")
for(i in 1:length(split)){
for(j in split[[i]]){
if(j=="H"){
probs[i] <- probs[i]+1
}
}
}
probs
split[1]
identical[probs]
?identical
probs <- c(0)
probs
split <- strsplit(Omega,"")
for(i in 1:length(split)){
for(j in split[[i]]){
if(j=="H"){
probs[i] <- probs[i]+1
}
}
}
probs
probs <- c()
split <- strsplit(Omega,"")
for(i in 1:length(split)){
for(j in split[[i]]){
if(j=="H"){
probs[i] <- probs[i]+1
}
}
}
probs
probs <- numeric(length(Omega))
split <- strsplit(Omega,"")
for(i in 1:length(split)){
for(j in split[[i]]){
probs[i] <- split[[i]][j]=="F"
}
}
probs
probs <- vector()
split <- strsplit(Omega,"")
for(i in 1:length(split)){
for(j in split[[i]]){
probs[i] <- split[[i]][j]=="F"
}
}
probs
probs <- vector()
split <- strsplit(Omega,"")
for(i in 1:length(split)){
for(j in split[[i]]){
probs[i] <- split[[i]][j]=="F"
}
}
prob
probs
split[1]
probs <- vector()
split <- strsplit(Omega,"")
for(i in 1:length(split)){
for(j in split[[i]]){
probs[i] <- j=="H"
}
}
probs
table(probs)
probs <- vector()
split <- strsplit(Omega,"")
for(i in 1:length(split)){
for(j in split[[i]]){
probs[j] <- j=="H"
}
}
probs
?cdf()
?ecdf()
#' ---
#' title: "Assignment 5, Social Science Inquiry II (SOSC13200-W22-3)"
#' author: "Tiffanie Huang"
#' date: "Monday 2/6/23 at 5pm"
#' ---
#' Packages
library(ggplot2)
set.seed(60637)
randinf <- function(df){
df1 <- df
df1$newW <- sample(df$W)
y1 <- mean(df1$Y[which(df1$newW==1)])
y0 <- mean(df1$Y[which(df1$newW==0)])
return(y1-y0)
}
randinf(data)
#new variables
data$W <- data$record
data$Y <- data$call_backs
#number audits assigned T and C if record is T
sum(data$W) #350 audits assigned treatment
sum(data$W==0) #350 audits assigned control
y_w1 <- mean(data$Y[which(data$W==1)])
y_w0 <- mean(data$Y[which(data$W==0)])
ate <- y_w1-y_w0
print(ate) #ATE estimate on Y under W: -0.1257143
data$newW <- sample(data$W)
data <- data.frame(
black=rep(c(0,1),times=c(300,400)),
record=c(rep(c(0,1),each=150),rep(c(0,1), each = 200)),
call_backs=c(rep(c(0,1),times=c(99,51)),
rep(c(0,1),times=c(125,25)),
rep(c(0,1),times=c(172,28)),
rep(c(0,1),times=c(190,10))
)
)
#' ## (1b)
#' Recreate Figure 6 in the paper.
#'
#make factors
agg <- aggregate(data$call_backs,by=list(data$black,data$record),mean)
colnames(agg) <- c("race","record","call_backs")
agg$race <- factor(agg$race,levels=c(1,0), labels=c("Black","White"))
agg$record <- factor(agg$record,levels=c(1,0),labels = c("record","no record"))
#figure 6 barplot
library(ggpattern)
ggplot(agg,aes(x=race,y=call_backs,fill=record))+
geom_col(position="dodge")+
geom_text(aes(label=signif(100*call_backs,2)),
position = position_dodge(width = .9))+
scale_fill_manual(values=c("#bcbddc","756bb1"))+
scale_x_discrete(labels=c("Black","White"))+
ylab('Percentage Called Back')+
ggtitle("Fig. 6-- The effect of a criminal record for black and white job applicants")+
scale_y_continuous(breaks=seq(0,0.4,0.05),labels=seq(0,40,5))+
theme(legend.position="",axis.title.x=element_blank())
#new variables
data$W <- data$record
data$Y <- data$call_backs
#number audits assigned T and C if record is T
sum(data$W) #350 audits assigned treatment
sum(data$W==0) #350 audits assigned control
y_w1 <- mean(data$Y[which(data$W==1)])
y_w0 <- mean(data$Y[which(data$W==0)])
ate <- y_w1-y_w0
print(ate) #ATE estimate on Y under W: -0.1257143
data$newW <- sample(data$W)
sum(data$newW) #350 individuals assigned treatment
sum(data$newW==0) #350 individuals assigned control
y_neww1 <- mean(data$Y[which(data$newW==1)])
y_neww0 <- mean(data$Y[which(data$newW==0)])
ate_new <- y_neww1-y_neww0
print(ate_new) #ATE estimate on Y under newW: 0.02285714
randinf <- function(df){
df1 <- df
df1$newW <- sample(df$W)
y1 <- mean(df1$Y[which(df1$newW==1)])
y0 <- mean(df1$Y[which(df1$newW==0)])
return(y1-y0)
}
randinf(data)
rep1k <- replicate(1000, randinf(data))
rep1k
#' ---
#' title: "Assignment 5, Social Science Inquiry II (SOSC13200-W22-3)"
#' author: "Tiffanie Huang"
#' date: "Monday 2/6/23 at 5pm"
#' ---
#' Packages
library(ggplot2)
set.seed(60637)
#data.frame
df <- data.frame(
# our initial treatment vector
W = c(1, 0, 0, 0, 0, 0, 1),
# our initial response vector
Y = c(15, 15, 20, 20, 10, 15, 30),
# treatment assignment probability
probs = rep(2/7, 7)
)
#under sharp null of no effect:
y1 <- df$Y[which(df$W == 1)]
y0 <- df$Y[which(df$W == 0)]
#add hypothetical data
df <-  cbind(df, Y0 = df$Y, Y1 = df$Y)
#Ys input: list
Ys_arg <- list(Y0 = df$Y0, Y1 = df$Y1)
#permutations function (?)
perm <- function(w_vec){
n_treat <- sum(w_vec) #number units assigned treatment
n_tot <- length(w_vec) #total units
return(combn(n_tot,n_treat,function(x) replace(numeric(n_tot),x,1)))
}
perm_t <- perm(df$W)
#ate sampling dist function
ate_sampdist <- function(Ys, perms){ #leaving out prob
ate_dm <- numeric(dim(perms)[2])
for(i in 1:(dim(perms)[2])){
ate_dm[i] <- mean(Ys$Y0[which(perms[,i]==1)])-mean(Ys$Y0[which(perms[,i]==0)])
}
return(ate_dm)
}
#distribution with values from df
dm <- ate_sampdist(Ys_arg,perm_t)
#check with original package function
library('ri')
perms1 <- genperms(df$W)
dm1 <- gendist(Ys_arg,
perms1,
prob=df$probs)
(identical(dm,dm1)) #true
perm_t <- perm(df$W)
perm_t
library(foreign)
data <- read.dta("Butler_Broockman_AJPS_2011_public_dta.dta", convert.factors=F)
data <- read.dta("../data/Butler_Broockman_AJPS_2011_public_dta.dta", convert.factors=F)
data <- read.dta("./data/Butler_Broockman_AJPS_2011_public_dta.dta", convert.factors=F)
data <- read.dta("../data/Butler_Broockman_AJPS_2011_public_dta.dta", convert.factors=F)
data <- read.dta("..data/Butler_Broockman_AJPS_2011_public_dta.dta", convert.factors=F)
data <- read.dta(".data/Butler_Broockman_AJPS_2011_public_dta.dta", convert.factors=F)
data <- read.dta("..data/Butler_Broockman_AJPS_2011_public_dta.dta", convert.factors=F)
getwd()
getwd()
setwd("Users/tiffanie/Documents/SOSC_132/assignments")
setwd("/Users/tiffanie/Documents/SOSC_132/assignments")
getwd()
#' (file D037F01).
#'
#' Run the whole replication file in R on your local computer. Note that Michael
#' used an absolute directory path when he wrote the replication file, you will
#' need to reset the working directory for your computer or use appropriate
#' relative file paths. He also used the Stata .dta version of the dataset. You
#' can use that version and read it in with the appropriate package, or you can
#' adapt the code to read in the .csv file.
#'
#'
library(foreign)
data <- read.dta("../data/Butler_Broockman_AJPS_2011_public_dta.dta", convert.factors=F)
rm(data)
#' (file D037F01).
#'
#' Run the whole replication file in R on your local computer. Note that Michael
#' used an absolute directory path when he wrote the replication file, you will
#' need to reset the working directory for your computer or use appropriate
#' relative file paths. He also used the Stata .dta version of the dataset. You
#' can use that version and read it in with the appropriate package, or you can
#' adapt the code to read in the .csv file.
#'
#'
library(foreign)
data <- read.dta("../data/Butler_Broockman_AJPS_2011_public_dta.dta", convert.factors=F)
View(data)
ts_orig <- ts[order(-ts$popularity),][which(duplicated(ts$name)==FALSE),]
#' ---
#' title: "Final Project Part 1, Social Science Inquiry II (SOSC13200-W22-3)"
#' author: "Tiffanie Huang"
#' date: "Wednesday 2/22/22 at 5pm"
#' ---
#'
ts <- read.csv("../data/taylor_swift_spotify.csv")
ts_orig <- ts[order(-ts$popularity),][which(duplicated(ts$name)==FALSE),]
View(ts_orig)
#' ---
#' title: "Final Project Part 1, Social Science Inquiry II (SOSC13200-W22-3)"
#' author: "Tiffanie Huang"
#' date: "Wednesday 2/22/22 at 5pm"
#' ---
#'
ts <- read.csv("../data/taylor_swift_spotify.csv")
ts[which("Live"%in%ts$album==TRUE)m]
ts[which("Live"%in%ts$album==TRUE),]
ts$album[which("Live"%in%ts$album==TRUE),]
ts$album[which("Live"%in%ts$album==TRUE)]
ts[which("Live"%in%album)]
ts[which("Live"%in%album),]
ts[which("Live"%in%ts$album)]
ts[which("Live"%in%ts$album==TRUE),]
ts[which("Live"%in%ts$album==TRUE),3]
"Taylor"%in%ts$album
ts$album
"Speak"%in%ts$album
str(ts$album)
?in
%in%
1%in%1
"Speak"%in%ts$album[.]
"Speak"%in%ts$album[,]
"Speak"%in%ts$album[:]
"Speak"%in%ts$album[:,]
ts[which("Live"%in%ts$album)]
ts[which("Live"%in%ts$album),]
ts[which("Live"%in%ts$album==1),]
ts[which("Live"%in%ts$album==0),]
ts[,which("Live"%in%ts$album)]
ts[,which("Live"%in%ts$album==0)]
ts[,which("Live"%in%ts$album==1)]
ts$album[,which("Live"%in%ts$album]
ts$album[,which("Live"%in%ts$album)]
ts$album[which("Live"%in%ts$album)]
"Live"%in%ts$album
"foklore"%in%ts$album
"folklore"%in%ts$album
ts[which("folklore"%in%ts$album)]
ts$album[2]
ts$album[which("folklore"%in%ts$album)]
ts$album[which("folklore"%in%ts$album==0)]
ts[which("folklore"%in%ts$album==0),]
ts[which("folklore"%in%ts$album==0),][2]
ts[,which("folklore"%in%ts$album==0)]
ts[album,which("folklore"%in%ts$album==0)]
ts[ts$album,which("folklore"%in%ts$album==0)]
ts[which("folklore"%in%ts$album==0),ts$album]
ts[which("folklore"%in%ts$album==0),]
ts
str(ts)
"folklore"%in%ts$album
which("folklore"%in%ts$album)
